Subject: [PATCH] WIP
---
Index: Classes/Model/L10nBaseService.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classes/Model/L10nBaseService.php b/Classes/Model/L10nBaseService.php
--- a/Classes/Model/L10nBaseService.php	(revision 2c2fe920057559bf48c74c8afee43539dae3bf79)
+++ b/Classes/Model/L10nBaseService.php	(date 1684753033220)
@@ -99,12 +99,15 @@
      */
     protected EmConfiguration $emConfiguration;
 
+    protected RecursivelyCheckRelationParent $recursivelyCheckRelationParent;
+
     /**
      * Check for deprecated configuration throws false positive in extension scanner.
      */
     public function __construct()
     {
         $this->emConfiguration = GeneralUtility::makeInstance(EmConfiguration::class);
+        $this->recursivelyCheckRelationParent = GeneralUtility::makeInstance(RecursivelyCheckRelationParent::class);
     }
 
     /**
@@ -639,37 +642,9 @@
                                                         );
                                                     }
                                                 }
-                                            } elseif (!empty($inlineTablesConfig = $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['l10nmgr']['inlineTablesConfig'] ?? []) && array_key_exists(
-                                                $table,
-                                                $inlineTablesConfig
-                                            )) {
-                                                /*
-                                                 * Special handling for 1:n relations
-                                                 *
-                                                 * Example: Inline elements (1:n) with tt_content as parent
-                                                 *
-                                                 * Config example:
-                                                 * $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['l10nmgr']['inlineTablesConfig'] = [
-                                                 *    'tx_myext_myelement' => [
-                                                 *       'parentField' => 'content',
-                                                 *       'childrenField' => 'myelements',
-                                                 *   ]];
-                                                 */
-                                                if (isset($this->TCEmain_cmd[$table][$elementUid])) {
-                                                    unset($this->TCEmain_cmd[$table][$elementUid]);
-                                                }
-                                                if (!empty($inlineTablesConfig[$table])
-                                                    && isset($element[$inlineTablesConfig[$table]['parentField']])
-                                                    && $element[$inlineTablesConfig[$table]['parentField']] > 0) {
-                                                    $this->depthCounter = 0;
-                                                    $this->recursivelyCheckForRelationParents(
-                                                        $element,
-                                                        (int)$Tlang,
-                                                        $inlineTablesConfig[$table]['parentField'] ?? '',
-                                                        $inlineTablesConfig[$table]['childrenField'] ?? ''
-                                                    );
-                                                }
-                                            } elseif ($table === 'sys_file_reference') {
+                                            }
+
+                                            if ($table === 'sys_file_reference') {
                                                 $element = $this->getRawRecord($table, $elementUid);
                                                 if (!empty($element['uid_foreign']) && !empty($element['tablenames']) && !empty($element['fieldname'])) {
                                                     if (!empty($GLOBALS['TCA'][$element['tablenames']]['columns'][$element['fieldname']]['config']['behaviour']['allowLanguageSynchronization'])) {
@@ -724,21 +699,13 @@
                                                     }
                                                 }
                                             } else {
-                                                //print "\nNEW\n";
-                                                if (isset($this->TCEmain_cmd[$table][$elementUid])) {
-                                                    unset($this->TCEmain_cmd[$table][$elementUid]);
-                                                }
+                                                $this->recursivelyCheckRelationParent->localizeRecordAndRequiredParents(
+                                                    $element,
+                                                    (int)$Tlang,
+                                                    $table,
+                                                    $this->TCEmain_cmd
+                                                );
 
-                                                //START add container support
-                                                if (ExtensionManagementUtility::isLoaded('container') && $table === 'tt_content' && $element['tx_container_parent'] > 0) {
-                                                    // localization is done by EXT:container, when container is localized, so localize cmd is not required
-                                                    // but mapping is required
-                                                    $this->childMappingArray[$table][$elementUid] = true;
-                                                } else {
-                                                    $this->TCEmain_cmd[$table][$elementUid]['localize'] = $Tlang;
-                                                }
-                                                //END add container support
-                                                
                                                 if (!empty($GLOBALS['TCA'][$table]['columns'][$Tfield])) {
                                                     $configuration = $GLOBALS['TCA'][$table]['columns'][$Tfield]['config'] ?? [];
 
@@ -1051,13 +1018,11 @@
                     // Add element to existing localization array
                     $this->TCEmain_cmd['tt_content'][$translatedParent['uid']]['inlineLocalizeSynchronize']['ids'][] = $element['uid'] ?? 0;
                 }
-            } else {
-                if (isset($element[$parentField]) && $element[$parentField] > 0) {
-                    $parent = $this->getRawRecord('tt_content', (int)$element[$parentField]);
-                    $this->recursivelyCheckForRelationParents($parent, $Tlang, $parentField, $childrenField);
-                } else {
-                    $this->TCEmain_cmd['tt_content'][$element['uid']]['localize'] = $Tlang;
-                }
+            } elseif (isset($element[$parentField]) && $element[$parentField] > 0) {
+                $parent = $this->getRawRecord('tt_content', (int)$element[$parentField]);
+                $this->recursivelyCheckForRelationParents($parent, $Tlang, $parentField, $childrenField);
+            } else {
+                $this->TCEmain_cmd['tt_content'][$element['uid']]['localize'] = $Tlang;
             }
         }
     }
Index: ext_localconf.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ext_localconf.php b/ext_localconf.php
--- a/ext_localconf.php	(revision 2c2fe920057559bf48c74c8afee43539dae3bf79)
+++ b/ext_localconf.php	(date 1684762009317)
@@ -30,3 +30,13 @@
 ];
 
 $GLOBALS['TYPO3_CONF_VARS']['FE']['addRootLineFields'] .= ',l10nmgr_configuration,l10nmgr_configuration_next_level';
+
+call_user_func(static function (): void {
+    if (\TYPO3\CMS\Core\Utility\ExtensionManagementUtility::isLoaded('container')) {
+        $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['l10nmgr']['additionalInlineTablesConfig']['tt_content'] ??= [];
+        $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['l10nmgr']['additionalInlineTablesConfig']['tt_content'][] = [
+            'parentTable' => 'tt_content',
+            'parentField' => 'tx_container_parent'
+        ];
+    }
+});
Index: Classes/Model/RecursivelyCheckRelationParent.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classes/Model/RecursivelyCheckRelationParent.php b/Classes/Model/RecursivelyCheckRelationParent.php
new file mode 100644
--- /dev/null	(date 1684671503984)
+++ b/Classes/Model/RecursivelyCheckRelationParent.php	(date 1684671503984)
@@ -0,0 +1,386 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Localizationteam\L10nmgr\Model;
+
+use Doctrine\DBAL\DBALException;
+use Doctrine\DBAL\Exception;
+use TYPO3\CMS\Backend\Utility\BackendUtility;
+use TYPO3\CMS\Core\DataHandling\DataHandler;
+use TYPO3\CMS\Core\Utility\GeneralUtility;
+use function is_array;
+
+class RecursivelyCheckRelationParent
+{
+    protected int $depthCounter = 0;
+
+    /**
+     * The records that have already been checked.
+     *
+     * Has the following format: `$this->checkedRecords[table name][record uid] = true`.
+     *
+     * @var array
+     */
+    protected array $checkedRecords = [];
+
+    /**
+     * Configuration for a single inline relation where the parent table is tt_content.
+     *
+     * This configuration has the following format:
+     *
+     * $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['l10nmgr']['inlineTablesConfig'] = [
+     *  'table name' => [
+     *      // The field that contains the foreign_key of the parent.
+     *      // This field is member of the child table.
+     *      'parentField' => 'tt_content',
+     *      // The field that contains the children.
+     *      // This field is member of the parent table.
+     *      'childrenField' => 'tx_ext_relation_table'
+     *  ],
+     * ];
+     *
+     * The parentField must have a TCA field configuration of type select with renderType selectSingle
+     * and a set value for foreign_table.
+     *
+     * The childrenField must have a TCA field configuration of type inline with foreign_table set and
+     * foreign_table_field not set.
+     *
+     * @var array|mixed
+     */
+    protected array $inlineTablesConfig;
+
+    /**
+     * Configuration for additional inline relations. This configuration allows multiple relations for any
+     * child-parent-table combinations.
+     *
+     * This configuration has the following format:
+     *
+     * $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['l10nmgr']['additionalInlineTablesConfig'] = [
+     *  'child table' => [[
+     *      // The name of the parent table.
+     *      'parentTable' => 'not_tt_content',
+     *      // The field that contains the foreign_key of the parent.
+     *      // This field is member of the child table.
+     *      'parentField' => 'tt_content',
+     *      // If the relation has a children field on the parent table,
+     *      // the childrenField property must be set to this fields name.
+     *      // Otherwise, if this relation can only be viewed from the child-side
+     *      // and no such field exists, this property should not be set.
+     *      'childrenField' => 'tx_ext_relation_table'
+     *  ]],
+     * ];
+     *
+     * The parentField must have a TCA field configuration of type select with renderType selectSingle
+     * and a set value for foreign_table.
+     *
+     * If the childrenField property is set, it must have a TCA field configuration of type inline with foreign_table
+     * set and foreign_table_field not set.
+     *
+     * @var array
+     */
+    protected array $additionalInlineTablesConfig;
+
+    public function __construct()
+    {
+        $this->inlineTablesConfig = $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['l10nmgr']['inlineTablesConfig'] ?? [];
+        $this->additionalInlineTablesConfig =
+            $GLOBALS['TYPO3_CONF_VARS']['EXTCONF']['l10nmgr']['additionalInlineTablesConfig'] ?? [];
+    }
+
+    /**
+     * Given a typo3 record, make sure that all necessary parent records are localized before localizing the
+     * record itself.
+     *
+     * @param array $defaultLanguageChildElement the child element record in the default language.
+     * It must have a uid column of type int.
+     * @param int $targetLanguage the system language uid of the target language.
+     * @param string $tableName the table name of the child element
+     * @param array $dataHandlerCommands a reference to the {@link DataHandler} command array
+     * where the commands, necessary to localize the given record, will be put into.
+     * @return void
+     * @throws DBALException
+     * @throws Exception
+     * @throws \Doctrine\DBAL\Driver\Exception
+     */
+    public function localizeRecordAndRequiredParents(
+        array  $defaultLanguageChildElement,
+        int    $targetLanguage,
+        string $tableName,
+        array  &$dataHandlerCommands
+    ): void
+    {
+        $this->depthCounter = 0;
+        $this->localizeRecordAndRequireParentsRecursively(
+            $defaultLanguageChildElement,
+            $targetLanguage,
+            $tableName,
+            $dataHandlerCommands
+        );
+    }
+
+    /**
+     * Given a typo3 child record, make sure that all necessary parent records are localized before localizing the
+     * child record itself.
+     *
+     * This is the actual recursive function that increments the depth counter.
+     *
+     * @param array $element the child element record in the default language.
+     * It must have a uid column of type int.
+     * @param int $targetLanguage the system language uid of the target language.
+     * @param string $tableName the table name of the child element
+     * @param array $dataHandlerCommands a reference to the {@link DataHandler} command array
+     * where the commands, necessary to localize the given record, will be put into.
+     * @return void
+     * @throws DBALException
+     * @throws Exception
+     * @throws \Doctrine\DBAL\Driver\Exception
+     */
+    protected function localizeRecordAndRequireParentsRecursively(
+        array  $element,
+        int    $targetLanguage,
+        string $tableName,
+        array  &$dataHandlerCommands
+    ): void
+    {
+        $this->depthCounter++;
+
+        if ($this->depthCounter >= 100) {
+            return;
+        }
+
+        // we cannot process records with uid column.
+        if (!array_key_exists('uid', $element)) {
+            return;
+        }
+
+        $uniqueElementId = (int)$element['uid'];
+
+        if (isset($this->checkedRecords[$tableName][$uniqueElementId])) {
+            return;
+        }
+
+        $this->checkedRecords[$tableName][$uniqueElementId] = true;
+
+        $translationParentPointerField = $this->getTranslationParentPointerField($tableName);
+        $tableLanguageField = $this->getLanguageField($tableName);
+
+        // Table has either no language field or no parent translation pointer field
+        // and thus cannot be localized.
+        if ($translationParentPointerField === null || $tableLanguageField === null) {
+            return;
+        }
+
+        /**
+         * A command, which causes the localization of the given default language element, has been put into the
+         * data handler command array reference.
+         */
+        $elementGotLocalized = false;
+
+        // for child tables with tt_content as parent table
+        if (
+            array_key_exists($tableName, $this->inlineTablesConfig)
+            && is_array($this->inlineTablesConfig[$tableName])
+        ) {
+            $configuration = $this->inlineTablesConfig[$tableName];
+            $parentField = (string)($configuration['parentField'] ?? '');
+            $childrenField = (string)($configuration['childrenField'] ?? '');
+
+            $elementGotLocalized = $this->localizeRecordFromParentSideOfRelation(
+                $element,
+                $targetLanguage,
+                'tt_content',
+                $parentField,
+                $childrenField,
+                $dataHandlerCommands
+            );
+        }
+
+        // for all the other relations
+        if (
+            array_key_exists($tableName, $this->additionalInlineTablesConfig)
+            && is_array($this->additionalInlineTablesConfig[$tableName])
+        ) {
+            foreach ($this->additionalInlineTablesConfig[$tableName] as $additionalConfig) {
+                $parentTable = (string)($additionalConfig['parentTable'] ?? '');
+                $parentField = (string)($additionalConfig['parentField'] ?? '');
+                $childrenField = array_key_exists('childrenField', $additionalConfig)
+                    ? (string)($additionalConfig['childrenField'])
+                    : null;
+
+                if ($this->localizeRecordFromParentSideOfRelation(
+                    $element,
+                    $targetLanguage,
+                    $parentTable,
+                    $parentField,
+                    $childrenField,
+                    $dataHandlerCommands
+                )) {
+                    $elementGotLocalized = true;
+                }
+            }
+        }
+
+        if (!$elementGotLocalized) {
+            $dataHandlerCommands[$tableName][$uniqueElementId]['localize'] = $targetLanguage;
+        }
+    }
+
+    /**
+     * Fetch the column name that contains the pointer to the table's translation parent (sys_language_uid = 0 record)
+     * from $GLOBALS['TCA'}. This field is called `l10n_parent` by convention.
+     *
+     * @link https://docs.typo3.org/m/typo3/reference-tca/main/en-us/Ctrl/Properties/TransOrigPointerField.html
+     * @param string $tableName
+     * @return string|null the name of the column or null, if not configured = table does not support localizations.
+     */
+    protected function getTranslationParentPointerField(string $tableName): ?string
+    {
+        if (empty($GLOBALS['TCA'][$tableName]['ctrl']['transOrigPointerField'] ?? [])) {
+            return null;
+        }
+
+        return (string)$GLOBALS['TCA'][$tableName]['ctrl']['transOrigPointerField'];
+    }
+
+    /**
+     * Fetch the column name that contains the language uid. This field is called `sys_language_uid` by convention.
+     *
+     * @link https://docs.typo3.org/m/typo3/reference-tca/main/en-us/Ctrl/Properties/LanguageField.html
+     * @param string $tableName
+     * @return string|null the name of the column or null, if not configured = table does not support localizations.
+     */
+    protected function getLanguageField(string $tableName): ?string
+    {
+        if (empty($GLOBALS['TCA'][$tableName]['ctrl']['languageField'] ?? [])) {
+            return null;
+        }
+
+        return (string)$GLOBALS['TCA'][$tableName]['ctrl']['languageField'];
+    }
+
+    /**
+     * Localize the given record from the parent side of the specific relation.
+     *
+     * @param array $childElement the database row
+     * @param int $targetLanguage the language uid of the target language
+     * @param string $parentTable the parent table (the side with the 1 in the 1:n relation)
+     * @param string $parentField the column that contains the parent record, which exists on the child table!
+     * @param string|null $childrenField the column that contains the child records, which exists on the parent table!
+     * If null is given, there is no children field on the parent table, meaning that the relation is only editable in
+     * the n:1 direction / from the child side but not from the parent side.
+     * @param array $dataHandlerCommands a reference to the {@link DataHandler} command array where the commands,
+     * necessary to localize the given record, will be put into.
+     * @return bool true if the child record will be localized through its relation with the parent.
+     * @throws DBALException
+     * @throws Exception
+     * @throws \Doctrine\DBAL\Driver\Exception
+     */
+    protected function localizeRecordFromParentSideOfRelation(
+        array   $childElement,
+        int     $targetLanguage,
+        string  $parentTable,
+        string  $parentField,
+        ?string $childrenField,
+        array   &$dataHandlerCommands
+    ): bool
+    {
+        if (!isset($childElement[$parentField]) || $childElement[$parentField] <= 0) {
+            return false;
+        }
+
+        $parentRecordId = $childElement[$parentField];
+
+        $parentLocalizations = BackendUtility::getRecordLocalization(
+            $parentTable,
+            $parentRecordId,
+            $targetLanguage
+        );
+
+        if (!is_array($parentLocalizations)) {
+            // table cannot be localized
+            return false;
+        }
+
+        $parentLocalization = count($parentLocalizations) !== 0
+            ? $parentLocalizations[array_key_first($parentLocalizations)]
+            : null;
+
+        // the parent record is already localized
+        if ($parentLocalization !== null && array_key_exists('uid', $parentLocalization)) {
+            // if there is a children field, we use the inlineLocalizeSynchronize action to localize the child record
+            if ($childrenField !== null) {
+                if (!is_array($dataHandlerCommands[$parentTable][$parentLocalization['uid']])) {
+                    $dataHandlerCommands[$parentTable][$parentLocalization['uid']] = [];
+                }
+
+                /**
+                 * typo3 core data handler commands for the parent localization record
+                 */
+                $commandForParent = &$dataHandlerCommands[$parentTable][$parentLocalization['uid']];
+
+                // append the record uid to the existing action or create a new one if necessary
+                if (!empty($commandForParent['inlineLocalizeSynchronize']['ids'])) {
+
+                    // Make sure that the existing command for the parent record is for this children field
+                    if ($commandForParent['inlineLocalizeSynchronize']['field'] === $childrenField) {
+                        $commandForParent['inlineLocalizeSynchronize']['ids'][] =
+                            $childElement['uid'] ?? 0;
+                        return true;
+                    }
+
+                    // otherwise commit the existing command and override it, since we cannot have multiple
+                    // inlineLocalizeSynchronize commands for different fields.
+                    $this->commitDataHandlerCommand([
+                        $parentTable => [
+                            $parentLocalization['uid'] => [
+                                'inlineLocalizeSynchronize' => $commandForParent['inlineLocalizeSynchronize']
+                            ]
+                        ]
+                    ]);
+                }
+
+                $commandForParent['inlineLocalizeSynchronize'] = [
+                    'field' => $childrenField,
+                    'language' => $targetLanguage,
+                    'action' => 'localize',
+                    'ids' => [$childElement['uid'] ?? 0],
+                ];
+
+                return true;
+            }
+
+            // with no children field, no special inline localization action is needed.
+            return false;
+        }
+
+        // the parent record has not yet been localized
+        $parentDefaultLanguageRecord = BackendUtility::getRecord(
+            $parentTable,
+            $parentRecordId
+        );
+        if ($parentDefaultLanguageRecord !== null) {
+            $this->localizeRecordAndRequireParentsRecursively(
+                $parentDefaultLanguageRecord,
+                $targetLanguage,
+                $parentTable,
+                $dataHandlerCommands
+            );
+            return true;
+        }
+        return false;
+    }
+
+    protected function commitDataHandlerCommand(array $commandArray): void
+    {
+        $dataHandler = GeneralUtility::makeInstance(DataHandler::class);
+        // TODO: shouldn't the data handler be configured in the same way as in
+        //       \Localizationteam\L10nmgr\Model\L10nBaseService::_submitContentAsTranslatedLanguageAndGetFlexFormDiff
+
+        $dataHandler->start([], $commandArray);
+        $dataHandler->process_cmdmap();
+
+        // TODO: What about data handler errors?
+        //       What about Exceptions during data handler processing?
+    }
+}

